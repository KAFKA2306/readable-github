class AdvancedGitHubEnhancer {
    constructor() {
        this.apiKey = '';
        this.projectData = null;
        this.activePanel = null;
        this.isInitialized = false;
        this.cache = new CacheManager();
        this.githubAPI = new GitHubAPIClient();
        this.promptEngine = new PromptEngine();
        this.init();
    }

    async init() {
        try {
            const result = await chrome.storage.sync.get('apiKey');
            this.apiKey = result.apiKey || '';
            console.log('üöÄ GitHub Enhancer v2.0 ÂàùÊúüÂåñ:', this.apiKey ? '‚úÖ API„Ç≠„ÉºË®≠ÂÆöÊ∏à„Åø' : '‚ùå API„Ç≠„ÉºÊú™Ë®≠ÂÆö');
        } catch (e) {
            console.error('‚ùå ÂàùÊúüÂåñ„Ç®„É©„Éº:', e);
            return;
        }

        await this.detectPageContext();
        this.setupGlobalUI();
        this.observePageChanges();
        this.setupMessageListener();
        this.isInitialized = true;
        
        // „Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÂÆå‰∫ÜÂæå„Å´ÂÆüË°å
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.enhance());
        } else {
            this.enhance();
        }
    }

    async detectPageContext() {
        const path = window.location.pathname;
        const url = window.location.href;
        
        this.pageContext = {
            type: this.getPageType(path),
            owner: this.getRepoOwner(path),
            repo: this.getRepoName(path),
            branch: this.getBranch(),
            filePath: this.getFilePath(path),
            url: url,
            cacheKey: this.generateCacheKey(path)
        };

        console.log('üìç „Éö„Éº„Ç∏„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà:', this.pageContext);
    }

    getPageType(path) {
        if (path.includes('/blob/')) return 'file';
        if (path.includes('/tree/')) return 'directory';
        if (path.match(/^\/[^\/]+\/[^\/]+\/?$/)) return 'repository';
        if (path.includes('/commit/')) return 'commit';
        if (path.includes('/pull/')) return 'pull_request';
        return 'other';
    }

    getRepoOwner(path) {
        const parts = path.split('/').filter(p => p);
        return parts[0] || null;
    }

    getRepoName(path) {
        const parts = path.split('/').filter(p => p);
        return parts[1] || null;
    }

    getBranch() {
        // „Çà„ÇäÁ¢∫ÂÆü„Å™„Éñ„É©„É≥„ÉÅÊ§úÂá∫
        const branchSelectors = [
            '[data-hotkey="w"] span',
            '.octicon-git-branch + span',
            '.branch-select-menu summary span',
            '[aria-label*="branch"] span'
        ];
        
        for (const selector of branchSelectors) {
            const element = document.querySelector(selector);
            if (element && element.textContent.trim()) {
                return element.textContent.trim();
            }
        }
        
        // URL„Åã„Çâ„Éñ„É©„É≥„ÉÅ„ÇíÊé®Ê∏¨
        const pathParts = window.location.pathname.split('/');
        if (pathParts.includes('blob') || pathParts.includes('tree')) {
            const branchIndex = pathParts.findIndex(part => part === 'blob' || part === 'tree') + 1;
            if (pathParts[branchIndex]) {
                return pathParts[branchIndex];
            }
        }
        
        return 'main'; // „Éá„Éï„Ç©„É´„Éà
    }

    getFilePath(path) {
        const parts = path.split('/').filter(p => p);
        if (parts.length > 4 && (parts[2] === 'blob' || parts[2] === 'tree')) {
            return parts.slice(4).join('/');
        }
        return null;
    }

    generateCacheKey(path) {
        return `${this.pageContext?.owner || 'unknown'}_${this.pageContext?.repo || 'unknown'}_${this.getBranch()}_${Date.now()}`;
    }

    setupGlobalUI() {
        this.injectGlobalStyles();
        this.createFloatingActionButton();
    }

    injectGlobalStyles() {
        if (document.getElementById('github-enhancer-styles')) return;

        const style = document.createElement('style');
        style.id = 'github-enhancer-styles';
        style.textContent = `
            /* „Ç∞„É≠„Éº„Éê„É´„Çπ„Çø„Ç§„É´ */
            .github-enhancer-fab {
                position: fixed;
                bottom: 30px;
                right: 30px;
                width: 60px;
                height: 60px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                border: none;
                border-radius: 50%;
                box-shadow: 0 8px 25px rgba(0,0,0,0.3);
                cursor: pointer;
                z-index: 9999;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 24px;
                color: white;
                transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            }

            .github-enhancer-fab:hover {
                transform: scale(1.1);
                box-shadow: 0 12px 35px rgba(0,0,0,0.4);
            }

            .github-enhancer-fab.pulse {
                animation: fabPulse 2s infinite;
            }

            @keyframes fabPulse {
                0% { box-shadow: 0 8px 25px rgba(0,0,0,0.3); }
                50% { box-shadow: 0 8px 25px rgba(102, 126, 234, 0.6); }
                100% { box-shadow: 0 8px 25px rgba(0,0,0,0.3); }
            }

            /* „Éë„Éç„É´„Çπ„Çø„Ç§„É´ */
            .github-enhancer-panel {
                position: fixed;
                top: 0;
                right: -650px;
                width: 650px;
                height: 100vh;
                background: linear-gradient(180deg, #0d1117 0%, #161b22 100%);
                border-left: 1px solid #30363d;
                box-shadow: -5px 0 25px rgba(0,0,0,0.5);
                z-index: 10000;
                transition: right 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
                display: flex;
                flex-direction: column;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            }

            .github-enhancer-panel.open {
                right: 0;
            }

            .github-enhancer-panel-header {
                background: linear-gradient(90deg, #238636 0%, #2ea043 100%);
                color: white;
                padding: 20px;
                display: flex;
                justify-content: space-between;
                align-items: center;
                border-bottom: 1px solid #30363d;
            }

            .github-enhancer-panel-title {
                font-size: 18px;
                font-weight: 600;
                margin: 0;
            }

            .github-enhancer-close-btn {
                background: rgba(255,255,255,0.2);
                border: none;
                border-radius: 6px;
                color: white;
                cursor: pointer;
                padding: 8px 12px;
                font-size: 14px;
                transition: background 0.2s;
            }

            .github-enhancer-close-btn:hover {
                background: rgba(255,255,255,0.3);
            }

            .github-enhancer-panel-content {
                flex: 1;
                overflow-y: auto;
                padding: 0;
            }

            .github-enhancer-tabs {
                display: flex;
                background: #21262d;
                border-bottom: 1px solid #30363d;
            }

            .github-enhancer-tab {
                flex: 1;
                background: none;
                border: none;
                color: #7d8590;
                padding: 16px;
                cursor: pointer;
                font-size: 14px;
                font-weight: 500;
                transition: all 0.2s;
                border-bottom: 3px solid transparent;
            }

            .github-enhancer-tab.active {
                color: #f0f6fc;
                border-bottom-color: #2ea043;
                background: rgba(46, 160, 67, 0.1);
            }

            .github-enhancer-tab:hover {
                background: rgba(177, 186, 196, 0.12);
            }

            .github-enhancer-tab-content {
                padding: 24px;
                color: #e6edf3;
                line-height: 1.6;
                display: none;
            }

            .github-enhancer-tab-content.active {
                display: block;
            }

            .github-enhancer-section {
                margin-bottom: 32px;
            }

            .github-enhancer-section-title {
                font-size: 16px;
                font-weight: 600;
                color: #f0f6fc;
                margin-bottom: 16px;
                padding-bottom: 8px;
                border-bottom: 1px solid #30363d;
                display: flex;
                align-items: center;
                gap: 8px;
            }

            .github-enhancer-content-area {
                background: #0d1117;
                border: 1px solid #30363d;
                border-radius: 8px;
                padding: 16px;
                font-size: 14px;
                white-space: pre-wrap;
                max-height: 600px;
                overflow-y: auto;
            }

            .github-enhancer-loading {
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 40px;
                color: #7d8590;
            }

            .github-enhancer-error {
                background: #da3633;
                color: white;
                padding: 12px 16px;
                border-radius: 6px;
                margin: 16px 0;
            }

            .github-enhancer-success {
                background: #238636;
                color: white;
                padding: 12px 16px;
                border-radius: 6px;
                margin: 16px 0;
            }

            .github-enhancer-info {
                background: #1f6feb;
                color: white;
                padding: 12px 16px;
                border-radius: 6px;
                margin: 16px 0;
                font-size: 13px;
            }

            /* „Ç≥„Éº„Éâ„Éñ„É≠„ÉÉ„ÇØÂº∑Âåñ */
            .github-enhancer-code-btn {
                position: absolute;
                top: 8px;
                right: 8px;
                background: rgba(35, 134, 54, 0.9);
                color: white;
                border: none;
                border-radius: 6px;
                padding: 6px 12px;
                font-size: 12px;
                cursor: pointer;
                z-index: 100;
                backdrop-filter: blur(10px);
                transition: all 0.2s;
            }

            .github-enhancer-code-btn:hover {
                background: rgba(46, 160, 67, 0.9);
                transform: scale(1.05);
            }

            /* „É¨„Çπ„Éù„É≥„Ç∑„ÉñÂØæÂøú */
            @media (max-width: 768px) {
                .github-enhancer-panel {
                    width: 100vw;
                    right: -100vw;
                }
                
                .github-enhancer-fab {
                    bottom: 20px;
                    right: 20px;
                    width: 50px;
                    height: 50px;
                    font-size: 20px;
                }
            }

            /* „Çπ„ÇØ„É≠„Éº„É´„Éê„Éº„Ç´„Çπ„Çø„Éû„Ç§„Ç∫ */
            .github-enhancer-panel ::-webkit-scrollbar {
                width: 8px;
            }

            .github-enhancer-panel ::-webkit-scrollbar-track {
                background: #21262d;
            }

            .github-enhancer-panel ::-webkit-scrollbar-thumb {
                background: #656d76;
                border-radius: 4px;
            }

            .github-enhancer-panel ::-webkit-scrollbar-thumb:hover {
                background: #7d8590;
            }

            /* „Éó„É≠„Ç∞„É¨„Çπ„Éê„Éº */
            .github-enhancer-progress {
                width: 100%;
                height: 4px;
                background: #30363d;
                border-radius: 2px;
                overflow: hidden;
                margin: 16px 0;
            }

            .github-enhancer-progress-bar {
                height: 100%;
                background: linear-gradient(90deg, #2ea043, #238636);
                border-radius: 2px;
                transition: width 0.3s ease;
            }
        `;
        document.head.appendChild(style);
    }

    createFloatingActionButton() {
        if (document.getElementById('github-enhancer-fab')) return;

        const fab = document.createElement('button');
        fab.id = 'github-enhancer-fab';
        fab.className = 'github-enhancer-fab';
        fab.innerHTML = 'üß†';
        fab.title = 'GitHub„Ç≥„Éº„ÉâËß£Ë™¨„ÇíÈñã„Åè (Ctrl+Shift+E)';
        
        fab.addEventListener('click', () => this.togglePanel());
        document.body.appendChild(fab);

        // „Ç≠„Éº„Éú„Éº„Éâ„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey && e.shiftKey && e.key === 'E') {
                e.preventDefault();
                this.togglePanel();
            }
        });

        // API„Ç≠„Éº„ÅåÊú™Ë®≠ÂÆö„ÅÆÂ†¥Âêà„ÅØ„Éë„É´„Çπ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
        if (!this.apiKey) {
            fab.classList.add('pulse');
        }
    }

    async enhance() {
        if (!this.isInitialized) return;

        // „Éö„Éº„Ç∏„Çø„Ç§„Éó„Å´Âøú„Åò„ÅüÊ©üËÉΩËøΩÂä†
        switch (this.pageContext.type) {
            case 'repository':
                await this.enhanceRepositoryPage();
                break;
            case 'file':
                await this.enhanceFilePage();
                break;
            case 'directory':
                await this.enhanceDirectoryPage();
                break;
        }

        // „Ç≥„Éº„Éâ„Éñ„É≠„ÉÉ„ÇØ„ÅÆÂº∑Âåñ
        this.enhanceCodeBlocks();
    }

    async enhanceRepositoryPage() {
        // „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊÉÖÂ†±„ÅÆÂèéÈõÜ
        await this.collectProjectData();
    }

    async enhanceFilePage() {
        // „Éï„Ç°„Ç§„É´Ëß£Êûê„Éú„Çø„É≥„ÅÆËøΩÂä†
        this.addFileAnalysisButtons();
    }

    async enhanceDirectoryPage() {
        // „Éá„Ç£„É¨„ÇØ„Éà„É™ÊßãÈÄ†„ÅÆËß£Êûê
        await this.analyzeDirectoryStructure();
    }

    enhanceCodeBlocks() {
        const codeBlocks = document.querySelectorAll('pre:not(.github-enhancer-processed)');
        
        codeBlocks.forEach(pre => {
            if (pre.textContent.trim().length > 50) {
                this.addCodeBlockButton(pre);
                pre.classList.add('github-enhancer-processed');
            }
        });
    }

    addCodeBlockButton(pre) {
        const btn = document.createElement('button');
        btn.className = 'github-enhancer-code-btn';
        btn.innerHTML = 'ü§ñ Ëß£Ë™¨';
        btn.onclick = (e) => {
            e.stopPropagation();
            this.explainCodeBlock(pre);
        };
        
        pre.style.position = 'relative';
        pre.appendChild(btn);
    }

    async collectProjectData() {
        const cacheKey = `project_${this.pageContext.cacheKey}`;
        const cached = this.cache.get(cacheKey);
        
        if (cached) {
            this.projectData = cached;
            console.log('‚úÖ „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Éº„Çø„Çí„Ç≠„É£„ÉÉ„Ç∑„É•„Åã„ÇâÂèñÂæó');
            return;
        }

        try {
            this.projectData = {
                name: this.pageContext.repo,
                owner: this.pageContext.owner,
                branch: this.pageContext.branch,
                description: this.getRepositoryDescription(),
                readme: await this.githubAPI.getReadmeContent(this.pageContext.owner, this.pageContext.repo),
                fileStructure: await this.githubAPI.getRepositoryTree(this.pageContext.owner, this.pageContext.repo, this.pageContext.branch),
                languages: await this.githubAPI.getLanguages(this.pageContext.owner, this.pageContext.repo),
                topics: this.getTopics(),
                packageJson: await this.githubAPI.getFileContent(this.pageContext.owner, this.pageContext.repo, 'package.json', this.pageContext.branch),
                metadata: await this.githubAPI.getRepositoryInfo(this.pageContext.owner, this.pageContext.repo)
            };

            this.cache.set(cacheKey, this.projectData, 30 * 60 * 1000); // 30ÂàÜ„Ç≠„É£„ÉÉ„Ç∑„É•
            console.log('üìä „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Éº„ÇøÂèéÈõÜÂÆå‰∫Ü:', this.projectData);
        } catch (error) {
            console.error('‚ùå „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Éº„ÇøÂèéÈõÜ„Ç®„É©„Éº:', error);
            this.projectData = { error: error.message };
        }
    }

    getRepositoryDescription() {
        const descSelectors = [
            '[data-testid="repository-description-text"]',
            '.BorderGrid-cell p',
            'span[title][class*="color-fg-muted"]',
            '.f4.my-3'
        ];

        for (const selector of descSelectors) {
            const element = document.querySelector(selector);
            if (element && element.textContent.trim()) {
                return element.textContent.trim();
            }
        }
        return '';
    }

    getTopics() {
        const topicElements = document.querySelectorAll('a[data-ga-click*="topic"], .topic-tag');
        return Array.from(topicElements).map(el => el.textContent.trim()).filter(t => t);
    }

    async getCurrentFileContent() {
        if (this.pageContext.type !== 'file') return null;

        const cacheKey = `file_${this.pageContext.cacheKey}_${this.pageContext.filePath}`;
        const cached = this.cache.get(cacheKey);
        
        if (cached) {
            console.log('‚úÖ „Éï„Ç°„Ç§„É´ÂÜÖÂÆπ„Çí„Ç≠„É£„ÉÉ„Ç∑„É•„Åã„ÇâÂèñÂæó');
            return cached;
        }

        // DOM „Åã„ÇâÂèñÂæó„ÇíË©¶Ë°å
        const domContent = this.extractFileContentFromDOM();
        if (domContent) {
            this.cache.set(cacheKey, domContent, 15 * 60 * 1000); // 15ÂàÜ„Ç≠„É£„ÉÉ„Ç∑„É•
            return domContent;
        }

        // GitHub API „Åã„ÇâÂèñÂæó
        try {
            const apiContent = await this.githubAPI.getFileContent(
                this.pageContext.owner,
                this.pageContext.repo,
                this.pageContext.filePath,
                this.pageContext.branch
            );
            
            if (apiContent) {
                this.cache.set(cacheKey, apiContent, 15 * 60 * 1000);
                console.log('‚úÖ GitHub APIÁµåÁî±„Åß„Éï„Ç°„Ç§„É´ÂÜÖÂÆπÂèñÂæóÊàêÂäü');
                return apiContent;
            }
        } catch (error) {
            console.error('‚ùå GitHub APIÁµåÁî±„Åß„ÅÆ„Éï„Ç°„Ç§„É´ÂÜÖÂÆπÂèñÂæóÂ§±Êïó:', error);
        }

        return null;
    }

    extractFileContentFromDOM() {
        // „Çà„ÇäÁ¢∫ÂÆü„Å™„Éï„Ç°„Ç§„É´ÂÜÖÂÆπÂèñÂæó
        const contentSelectors = [
            '.js-file-line-container .js-file-line',
            '.blob-wrapper table tbody tr td.blob-code-inner',
            '.highlight table tbody tr td:last-child',
            'table.highlight tbody tr td.blob-code',
            '.Box-body .blob-code',
            '.blob-code-inner'
        ];

        for (const selector of contentSelectors) {
            const lines = document.querySelectorAll(selector);
            if (lines.length > 0) {
                const content = Array.from(lines).map(line => {
                    // „Çà„ÇäÊ≠£Á¢∫„Å™„ÉÜ„Ç≠„Çπ„ÉàÊäΩÂá∫
                    return line.textContent || line.innerText || '';
                }).join('\n');
                
                if (content.trim().length > 10) {
                    console.log('‚úÖ DOMÁµåÁî±„Åß„Éï„Ç°„Ç§„É´ÂÜÖÂÆπÂèñÂæóÊàêÂäü:', selector, `${lines.length}Ë°å`);
                    return content.trim();
                }
            }
        }

        return null;
    }

    togglePanel() {
        if (!this.activePanel) {
            this.createPanel();
        }
        
        const panel = this.activePanel;
        const isOpen = panel.classList.contains('open');
        
        if (isOpen) {
            panel.classList.remove('open');
        } else {
            panel.classList.add('open');
            this.loadPanelContent();
        }
    }

    createPanel() {
        if (document.getElementById('github-enhancer-panel')) {
            this.activePanel = document.getElementById('github-enhancer-panel');
            return;
        }

        const panel = document.createElement('div');
        panel.id = 'github-enhancer-panel';
        panel.className = 'github-enhancer-panel';
        
        panel.innerHTML = `
            <div class="github-enhancer-panel-header">
                <h2 class="github-enhancer-panel-title">üß† AI „Ç≥„Éº„ÉâËß£Ë™¨ v2.0</h2>
                <button class="github-enhancer-close-btn" onclick="this.closest('.github-enhancer-panel').classList.remove('open')">
                    ‚úï Èñâ„Åò„Çã
                </button>
            </div>
            <div class="github-enhancer-tabs">
                <button class="github-enhancer-tab active" data-tab="overview">üìã Ê¶ÇË¶Å</button>
                <button class="github-enhancer-tab" data-tab="structure">üèóÔ∏è ÊßãÈÄ†</button>
                <button class="github-enhancer-tab" data-tab="analysis">üîç Ë©≥Á¥∞</button>
                <button class="github-enhancer-tab" data-tab="learning">üìö Â≠¶Áøí</button>
            </div>
            <div class="github-enhancer-panel-content">
                <div class="github-enhancer-tab-content active" data-content="overview">
                    <div class="github-enhancer-loading">Ë™≠„ÅøËæº„Åø‰∏≠...</div>
                </div>
                <div class="github-enhancer-tab-content" data-content="structure">
                    <div class="github-enhancer-loading">Ë™≠„ÅøËæº„Åø‰∏≠...</div>
                </div>
                <div class="github-enhancer-tab-content" data-content="analysis">
                    <div class="github-enhancer-loading">Ë™≠„ÅøËæº„Åø‰∏≠...</div>
                </div>
                <div class="github-enhancer-tab-content" data-content="learning">
                    <div class="github-enhancer-loading">Ë™≠„ÅøËæº„Åø‰∏≠...</div>
                </div>
            </div>
        `;

        // „Çø„ÉñÂàá„ÇäÊõø„Åà„ÅÆË®≠ÂÆö
        panel.querySelectorAll('.github-enhancer-tab').forEach(tab => {
            tab.addEventListener('click', () => this.switchTab(tab.dataset.tab));
        });

        document.body.appendChild(panel);
        this.activePanel = panel;
    }

    switchTab(tabName) {
        // „Çø„Éñ„ÅÆÁä∂ÊÖãÊõ¥Êñ∞
        this.activePanel.querySelectorAll('.github-enhancer-tab').forEach(tab => {
            tab.classList.toggle('active', tab.dataset.tab === tabName);
        });

        // „Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆÁä∂ÊÖãÊõ¥Êñ∞
        this.activePanel.querySelectorAll('.github-enhancer-tab-content').forEach(content => {
            content.classList.toggle('active', content.dataset.content === tabName);
        });

        // „Çø„ÉñÂõ∫Êúâ„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑË™≠„ÅøËæº„Åø
        this.loadTabContent(tabName);
    }

    async loadPanelContent() {
        if (!this.apiKey) {
            this.showApiKeyError();
            return;
        }

        // „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Éº„Çø„ÅåÊú™ÂèéÈõÜ„ÅÆÂ†¥Âêà„ÅØÂèéÈõÜ
        if (!this.projectData) {
            await this.collectProjectData();
        }

        this.loadTabContent('overview');
    }

    async loadTabContent(tabName) {
        const content = this.activePanel.querySelector(`[data-content="${tabName}"]`);
        if (!content) return;

        // Êó¢„Å´„É≠„Éº„ÉâÊ∏à„Åø„Åã„ÉÅ„Çß„ÉÉ„ÇØÔºà„Ç≠„É£„ÉÉ„Ç∑„É•Á¢∫Ë™çÔºâ
        const cacheKey = `tab_${tabName}_${this.pageContext.cacheKey}`;
        const cached = this.cache.get(cacheKey);
        
        if (cached) {
            content.innerHTML = `
                <div class="github-enhancer-section">
                    <div class="github-enhancer-content-area">${cached}</div>
                </div>
            `;
            return;
        }

        content.innerHTML = '<div class="github-enhancer-loading">ü§ñ AIËß£Êûê‰∏≠...</div>';

        try {
            let analysisResult;
            
            switch (tabName) {
                case 'overview':
                    analysisResult = await this.generateProjectOverview();
                    break;
                case 'structure':
                    analysisResult = await this.generateStructureAnalysis();
                    break;
                case 'analysis':
                    analysisResult = await this.generateDetailedAnalysis();
                    break;
                case 'learning':
                    analysisResult = await this.generateLearningGuide();
                    break;
                default:
                    analysisResult = '„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ';
            }

            content.innerHTML = `
                <div class="github-enhancer-section">
                    <div class="github-enhancer-content-area">${analysisResult}</div>
                </div>
            `;

            // ÁµêÊûú„Çí„Ç≠„É£„ÉÉ„Ç∑„É•
            this.cache.set(cacheKey, analysisResult, 60 * 60 * 1000); // 1ÊôÇÈñì„Ç≠„É£„ÉÉ„Ç∑„É•

        } catch (error) {
            console.error(`‚ùå ${tabName}„Çø„Éñ„ÅÆË™≠„ÅøËæº„Åø„Ç®„É©„Éº:`, error);
            content.innerHTML = `
                <div class="github-enhancer-error">
                    „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${error.message}
                </div>
            `;
        }
    }

    async generateProjectOverview() {
        const prompt = this.promptEngine.createOverviewPrompt({
            projectData: this.projectData,
            pageContext: this.pageContext,
            currentFile: this.pageContext.type === 'file' ? await this.getCurrentFileContent() : null
        });

        return await this.callGemini(prompt);
    }

    async generateStructureAnalysis() {
        const prompt = this.promptEngine.createStructurePrompt({
            projectData: this.projectData,
            pageContext: this.pageContext,
            fileStructure: this.projectData?.fileStructure || []
        });

        return await this.callGemini(prompt);
    }

    async generateDetailedAnalysis() {
        const prompt = this.promptEngine.createDetailedPrompt({
            projectData: this.projectData,
            pageContext: this.pageContext,
            currentFile: this.pageContext.type === 'file' ? await this.getCurrentFileContent() : null,
            fileName: this.pageContext.filePath
        });

        return await this.callGemini(prompt);
    }

    async generateLearningGuide() {
        const prompt = this.promptEngine.createLearningPrompt({
            projectData: this.projectData,
            pageContext: this.pageContext,
            userLevel: 'intermediate' // ‰ªäÂæåË®≠ÂÆöÂèØËÉΩ„Å´„Åô„Çã
        });

        return await this.callGemini(prompt);
    }

    async explainCodeBlock(pre) {
        if (!this.apiKey) {
            alert('API„Ç≠„Éº„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇÂè≥‰∏ã„ÅÆ„Éú„Çø„É≥„Åã„ÇâË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
            return;
        }

        const code = pre.textContent.slice(0, 3000);
        const prompt = this.promptEngine.createCodeBlockPrompt({
            code: code,
            language: this.detectCodeLanguage(pre),
            context: this.pageContext
        });

        try {
            const explanation = await this.callGemini(prompt);
            this.showCodeExplanation(pre, explanation);
        } catch (error) {
            console.error('‚ùå „Ç≥„Éº„ÉâËß£Ë™¨„Ç®„É©„Éº:', error);
            alert(`Ëß£Ë™¨ÁîüÊàê„Ç®„É©„Éº: ${error.message}`);
        }
    }

    detectCodeLanguage(pre) {
        // „Ç≥„Éº„ÉâË®ÄË™û„ÅÆÊ§úÂá∫
        const classNames = pre.className + ' ' + (pre.querySelector('code')?.className || '');
        
        const languageMap = {
            'javascript': ['js', 'javascript', 'es6'],
            'typescript': ['ts', 'typescript'],
            'python': ['py', 'python'],
            'java': ['java'],
            'cpp': ['cpp', 'c++', 'cxx'],
            'c': ['c'],
            'html': ['html', 'htm'],
            'css': ['css'],
            'json': ['json'],
            'yaml': ['yaml', 'yml'],
            'markdown': ['md', 'markdown'],
            'bash': ['bash', 'sh', 'shell']
        };

        for (const [lang, patterns] of Object.entries(languageMap)) {
            if (patterns.some(pattern => classNames.toLowerCase().includes(pattern))) {
                return lang;
            }
        }

        // „Éï„Ç°„Ç§„É´Êã°ÂºµÂ≠ê„Åã„ÇâÊé®Ê∏¨
        if (this.pageContext.filePath) {
            const ext = this.pageContext.filePath.split('.').pop()?.toLowerCase();
            for (const [lang, patterns] of Object.entries(languageMap)) {
                if (patterns.includes(ext)) {
                    return lang;
                }
            }
        }

        return 'unknown';
    }

    showCodeExplanation(pre, explanation) {
        // Êó¢Â≠ò„ÅÆË™¨Êòé„ÇíÂâäÈô§
        const existing = pre.querySelector('.github-enhancer-explanation');
        if (existing) existing.remove();

        const explanationDiv = document.createElement('div');
        explanationDiv.className = 'github-enhancer-explanation';
        explanationDiv.style.cssText = `
            margin-top: 16px;
            background: linear-gradient(180deg, #0d1117 0%, #161b22 100%);
            border: 1px solid #30363d;
            border-radius: 8px;
            padding: 16px;
            color: #e6edf3;
            font-size: 14px;
            line-height: 1.6;
            position: relative;
        `;

        explanationDiv.innerHTML = `
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px; padding-bottom: 8px; border-bottom: 1px solid #30363d;">
                <strong style="color: #2ea043;">ü§ñ AIËß£Ë™¨</strong>
                <button onclick="this.closest('.github-enhancer-explanation').remove()" 
                        style="background: #da3633; color: white; border: none; border-radius: 4px; padding: 4px 8px; cursor: pointer; font-size: 12px;">
                    ‚úï
                </button>
            </div>
            <div style="white-space: pre-wrap;">${explanation}</div>
        `;

        pre.appendChild(explanationDiv);
        explanationDiv.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }

    async callGemini(prompt) {
        if (!this.apiKey) {
            throw new Error('API„Ç≠„Éº„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
        }

        const response = await fetch(
            `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${this.apiKey}`,
            {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    contents: [{ parts: [{ text: prompt }] }],
                    generationConfig: {
                        maxOutputTokens: 4096,
                        temperature: 0.7,
                        topP: 0.8,
                        topK: 40
                    },
                    safetySettings: [
                        {
                            category: "HARM_CATEGORY_HARASSMENT",
                            threshold: "BLOCK_MEDIUM_AND_ABOVE"
                        }
                    ]
                })
            }
        );

        if (!response.ok) {
            const errorData = await response.text();
            console.error('‚ùå Gemini API „Ç®„É©„Éº:', errorData);
            throw new Error(`API Error: ${response.status} - ${errorData}`);
        }

        const data = await response.json();
        return data.candidates?.[0]?.content?.parts?.[0]?.text || 'Ëß£Ë™¨„ÇíÁîüÊàê„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü';
    }

    showApiKeyError() {
        const content = this.activePanel.querySelector('.github-enhancer-tab-content.active');
        content.innerHTML = `
            <div class="github-enhancer-section">
                <div class="github-enhancer-error">
                    ‚ùå Gemini API„Ç≠„Éº„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ
                </div>
                <div class="github-enhancer-info">
                    <strong>Ë®≠ÂÆöÊâãÈ†Ü:</strong><br>
                    1. <a href="https://aistudio.google.com/" target="_blank" style="color: #58a6ff;">Google AI Studio</a>„ÅßAPI„Ç≠„Éº„ÇíÂèñÂæó<br>
                    2. ChromeÊã°ÂºµÊ©üËÉΩ„ÅÆ„Ç¢„Ç§„Ç≥„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ<br>
                    3. API„Ç≠„Éº„ÇíÂÖ•Âäõ„Åó„Å¶‰øùÂ≠ò<br>
                    4. „Åì„ÅÆ„Éë„Éç„É´„ÇíÂÜçÂ∫¶Èñã„Åè
                </div>
            </div>
        `;
    }

    observePageChanges() {
        let lastUrl = location.href;
        
        const observer = new MutationObserver(async () => {
            if (location.href !== lastUrl) {
                lastUrl = location.href;
                console.log('üìç „Éö„Éº„Ç∏Â§âÊõ¥Ê§úÂá∫:', lastUrl);
                
                // „Éö„Éº„Ç∏ÊÉÖÂ†±„ÇíÊõ¥Êñ∞
                await this.detectPageContext();
                
                // Â∞ë„ÅóÂæÖ„Å£„Å¶„Åã„ÇâÂº∑ÂåñÂá¶ÁêÜ„ÇíÂÆüË°å
                setTimeout(() => this.enhance(), 1500);
            } else {
                // DOMÂ§âÊõ¥„Å´„Çà„Çã„Ç≥„Éº„Éâ„Éñ„É≠„ÉÉ„ÇØËøΩÂä†„Çí„ÉÅ„Çß„ÉÉ„ÇØ
                this.enhanceCodeBlocks();
            }
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
    }

    setupMessageListener() {
        chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
            if (request.action === 'updateApiKey') {
                this.apiKey = request.apiKey;
                console.log('‚úÖ API„Ç≠„ÉºÊõ¥Êñ∞:', this.apiKey ? 'Ë®≠ÂÆöÊ∏à„Åø' : 'ÂâäÈô§');
                
                // FAB„ÅÆ„Éë„É´„Çπ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Âà∂Âæ°
                const fab = document.getElementById('github-enhancer-fab');
                if (fab) {
                    fab.classList.toggle('pulse', !this.apiKey);
                }
                
                // „Ç≠„É£„ÉÉ„Ç∑„É•„ÇØ„É™„Ç¢ÔºàÊñ∞„Åó„ÅÑAPI„Ç≠„Éº„Åß„ÅÆÂÜçÁîüÊàê„ÅÆ„Åü„ÇÅÔºâ
                this.cache.clear();
                
                sendResponse({ success: true });
            }
            return true;
        });
    }
}

// „Ç≠„É£„ÉÉ„Ç∑„É•„Éû„Éç„Éº„Ç∏„É£„Éº„ÇØ„É©„Çπ
class CacheManager {
    constructor() {
        this.storage = new Map();
        this.maxSize = 50; // ÊúÄÂ§ß50„Ç®„É≥„Éà„É™
        this.cleanupInterval = 5 * 60 * 1000; // 5ÂàÜ„Åî„Å®„Å´„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
        
        this.startCleanup();
    }

    set(key, value, ttl = 60 * 60 * 1000) { // „Éá„Éï„Ç©„É´„Éà1ÊôÇÈñì
        const expiry = Date.now() + ttl;
        
        // „Çµ„Ç§„Ç∫Âà∂Èôê„ÉÅ„Çß„ÉÉ„ÇØ
        if (this.storage.size >= this.maxSize) {
            this.evictOldest();
        }
        
        this.storage.set(key, {
            value: value,
            expiry: expiry,
            accessed: Date.now()
        });
    }

    get(key) {
        const item = this.storage.get(key);
        
        if (!item) return null;
        
        if (Date.now() > item.expiry) {
            this.storage.delete(key);
            return null;
        }
        
        item.accessed = Date.now();
        return item.value;
    }

    delete(key) {
        return this.storage.delete(key);
    }

    clear() {
        this.storage.clear();
    }

    evictOldest() {
        let oldestKey = null;
        let oldestTime = Date.now();
        
        for (const [key, item] of this.storage.entries()) {
            if (item.accessed < oldestTime) {
                oldestTime = item.accessed;
                oldestKey = key;
            }
        }
        
        if (oldestKey) {
            this.storage.delete(oldestKey);
        }
    }

    startCleanup() {
        setInterval(() => {
            const now = Date.now();
            const expired = [];
            
            for (const [key, item] of this.storage.entries()) {
                if (now > item.expiry) {
                    expired.push(key);
                }
            }
            
            expired.forEach(key => this.storage.delete(key));
            
            if (expired.length > 0) {
                console.log(`üßπ „Ç≠„É£„ÉÉ„Ç∑„É•„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó: ${expired.length}‰ª∂„ÅÆÊúüÈôêÂàá„Çå„Ç®„É≥„Éà„É™„ÇíÂâäÈô§`);
            }
        }, this.cleanupInterval);
    }
}

// GitHub API „ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÇØ„É©„Çπ
class GitHubAPIClient {
    constructor() {
        this.baseURL = 'https://api.github.com';
        this.cache = new Map();
    }

    async makeRequest(endpoint) {
        const url = `${this.baseURL}${endpoint}`;
        
        try {
            const response = await fetch(url, {
                headers: {
                    'Accept': 'application/vnd.github.v3+json',
                    'User-Agent': 'GitHub-Enhancer-Extension'
                }
            });

            if (!response.ok) {
                throw new Error(`GitHub API error: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('GitHub API request failed:', error);
            throw error;
        }
    }

    async getRepositoryInfo(owner, repo) {
        try {
            return await this.makeRequest(`/repos/${owner}/${repo}`);
        } catch (error) {
            console.error('„É™„Éù„Ç∏„Éà„É™ÊÉÖÂ†±„ÅÆÂèñÂæó„Å´Â§±Êïó:', error);
            return null;
        }
    }

    async getReadmeContent(owner, repo) {
        try {
            const response = await this.makeRequest(`/repos/${owner}/${repo}/readme`);
            return atob(response.content);
        } catch (error) {
            console.error('READMEÂèñÂæó„Å´Â§±Êïó:', error);
            return null;
        }
    }

    async getFileContent(owner, repo, path, branch = 'main') {
        try {
            const response = await this.makeRequest(`/repos/${owner}/${repo}/contents/${path}?ref=${branch}`);
            if (response.content) {
                return atob(response.content);
            }
            return null;
        } catch (error) {
            console.error(`„Éï„Ç°„Ç§„É´ÂèñÂæó„Å´Â§±Êïó (${path}):`, error);
            return null;
        }
    }

    async getRepositoryTree(owner, repo, branch = 'main') {
        try {
            const response = await this.makeRequest(`/repos/${owner}/${repo}/git/trees/${branch}?recursive=1`);
            return response.tree || [];
        } catch (error) {
            console.error('„É™„Éù„Ç∏„Éà„É™„ÉÑ„É™„ÉºÂèñÂæó„Å´Â§±Êïó:', error);
            return [];
        }
    }

    async getLanguages(owner, repo) {
        try {
            const response = await this.makeRequest(`/repos/${owner}/${repo}/languages`);
            return Object.keys(response);
        } catch (error) {
            console.error('Ë®ÄË™ûÊÉÖÂ†±ÂèñÂæó„Å´Â§±Êïó:', error);
            return [];
        }
    }
}

// „Éó„É≠„É≥„Éó„Éà„Ç®„É≥„Ç∏„Éã„Ç¢„É™„É≥„Ç∞„ÇØ„É©„Çπ
class PromptEngine {
    createOverviewPrompt({ projectData, pageContext, currentFile }) {
        const contextInfo = this.buildContextInfo(projectData, pageContext);
        
        return `
# „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊ¶ÇË¶ÅËß£Êûê„Çø„Çπ„ÇØ

„ÅÇ„Å™„Åü„ÅØÁµåÈ®ìË±äÂØå„Å™„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„Éà„Å®„Åó„Å¶„ÄÅGitHub„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÊ¶ÇË¶Å„ÇíËß£Êûê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

## Ëß£ÊûêÂØæË±°„Éó„É≠„Ç∏„Çß„ÇØ„Éà
${contextInfo}

## Âá∫ÂäõË¶ÅÊ±Ç
‰ª•‰∏ã„ÅÆÊßãÈÄ†„ÅßÊó•Êú¨Ë™û„ÅßËß£ÊûêÁµêÊûú„ÇíÊèê‰æõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

### üéØ „Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÁõÆÁöÑ„Å®‰æ°ÂÄ§
- „Åì„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅåËß£Ê±∫„Åó„Çà„ÅÜ„Å®„Åó„Å¶„ÅÑ„ÇãÂïèÈ°å
- „Çø„Éº„Ç≤„ÉÉ„Éà„É¶„Éº„Ç∂„Éº„Å®„É¶„Éº„Çπ„Ç±„Éº„Çπ
- Â∏ÇÂ†¥‰æ°ÂÄ§„Å®Á´∂ÂêàÂÑ™‰ΩçÊÄß

### üíª ÊäÄË°ì„Çπ„Çø„ÉÉ„ÇØ„Å®ÈÅ∏ÊäûÁêÜÁî±
- ‰ΩøÁî®„Åó„Å¶„ÅÑ„Çã‰∏ªË¶ÅÊäÄË°ì„Å®„Åù„ÅÆÁêÜÁî±
- „Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„ÅÆÁâπÂæ¥„Å®Ë®≠Ë®àÊÄùÊÉ≥
- ÊäÄË°ìÁöÑ„Å™Âº∑„Åø„Å®Ë™≤È°å

### üìä „Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÊàêÁÜüÂ∫¶„Å®ÂìÅË≥™
- „Ç≥„Éº„Éâ„ÅÆÂìÅË≥™ÊåáÊ®ôÔºàÊé®Ê∏¨Ôºâ
- „Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆË¶èÊ®°ÊÑü„Å®Ë§áÈõëÂ∫¶
- ÈñãÁô∫„Éó„É≠„Çª„Çπ„Å®„Éô„Çπ„Éà„Éó„É©„ÇØ„ÉÜ„Ç£„Çπ

### üöÄ Â≠¶Áøí‰æ°ÂÄ§„Å®„Éù„Ç§„É≥„Éà
- „Åì„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Åã„ÇâÂ≠¶„Åπ„Çã‰∏ªË¶Å„Å™ÊäÄË°ìË¶ÅÁ¥†
- ÂàùÂøÉËÄÖ„Åã„Çâ‰∏äÁ¥öËÄÖ„Åæ„Åß„ÅÆÂ≠¶Áøí„Éù„Ç§„É≥„Éà
- ÂÆüÂãô„Åß„ÅÆÂøúÁî®ÂèØËÉΩÊÄß

ÂõûÁ≠î„ÅØÂÖ∑‰ΩìÁöÑ„ÅßÂÆüÁî®ÁöÑ„Å™ÂÜÖÂÆπ„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÊé®Ê∏¨ÈÉ®ÂàÜ„ÅØÊòéÁ¢∫„Å´Á§∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
        `.trim();
    }

    createStructurePrompt({ projectData, pageContext, fileStructure }) {
        const contextInfo = this.buildContextInfo(projectData, pageContext);
        const structureTree = this.buildFileStructureTree(fileStructure);
        
        return `
# „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊßãÈÄ†Ëß£Êûê„Çø„Çπ„ÇØ

„ÅÇ„Å™„Åü„ÅØÁµåÈ®ìË±äÂØå„Å™„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„Éà„Å®„Åó„Å¶„ÄÅ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÊßãÈÄ†„ÇíË©≥Á¥∞„Å´Ëß£Êûê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

## Ëß£ÊûêÂØæË±°„Éó„É≠„Ç∏„Çß„ÇØ„Éà
${contextInfo}

## „Éï„Ç°„Ç§„É´ÊßãÈÄ†
\`\`\`
${structureTree}
\`\`\`

## Âá∫ÂäõË¶ÅÊ±Ç
‰ª•‰∏ã„ÅÆÊßãÈÄ†„ÅßÊó•Êú¨Ë™û„ÅßËß£ÊûêÁµêÊûú„ÇíÊèê‰æõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

### üèóÔ∏è „Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Éë„Çø„Éº„É≥„ÅÆË≠òÂà•
- ‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Çã„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Éë„Çø„Éº„É≥ÔºàMVC, MVVM, „Éû„Ç§„ÇØ„É≠„Çµ„Éº„Éì„ÇπÁ≠âÔºâ
- „Éá„Ç£„É¨„ÇØ„Éà„É™ÊßãÊàê„Åã„ÇâË™≠„ÅøÂèñ„Çå„ÇãË®≠Ë®àÊÄùÊÉ≥
- Ë≤¨‰ªªÂàÜÊï£„Å®„É¢„Ç∏„É•„Éº„É´Âåñ„ÅÆÁä∂Ê≥Å

### üìÅ ‰∏ªË¶Å„Éá„Ç£„É¨„ÇØ„Éà„É™„Å®„Éï„Ç°„Ç§„É´„ÅÆÂΩπÂâ≤
- ÂêÑ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÁõÆÁöÑ„Å®Ë≤¨‰ªªÁØÑÂõ≤
- ÈáçË¶Å„Å™„Éï„Ç°„Ç§„É´„ÅÆÊ©üËÉΩ„Å®‰æùÂ≠òÈñ¢‰øÇ
- Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„Å®„Åù„ÅÆÊÑèÂë≥

### üîÑ „Éá„Éº„Çø„Éï„É≠„Éº„Å®„Éó„É≠„Çª„Çπ
- „Éá„Éº„Çø„ÅÆÊµÅ„Çå„Å®Âá¶ÁêÜ„ÅÆÈ†ÜÂ∫è
- ‰∏ªË¶Å„Å™„Ç®„É≥„Éà„É™„Éº„Éù„Ç§„É≥„Éà„Å®ÂÆüË°å„Éë„Çπ
- APIË®≠Ë®à„Å®„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„ÇπÊßãÈÄ†

### üìà Â≠¶Áøí„ÅÆÈÄ≤„ÇÅÊñπ
- ÁêÜËß£„Åô„Åπ„Åç„Éï„Ç°„Ç§„É´„ÅÆÂÑ™ÂÖàÈ†Ü‰Ωç
- ÊÆµÈöéÁöÑ„Å™Â≠¶Áøí„Éë„Çπ
- ÂêÑ„É¨„Éô„É´„Åß„ÅÆÁêÜËß£ÁõÆÊ®ô

ÂõûÁ≠î„ÅØÂÖ∑‰ΩìÁöÑ„Åß„ÄÅÂÆüÈöõ„ÅÆ„Éï„Ç°„Ç§„É´Âêç„ÇíÂèÇÁÖß„Åó„Å™„Åå„ÇâË™¨Êòé„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
        `.trim();
    }

    createDetailedPrompt({ projectData, pageContext, currentFile, fileName }) {
        const contextInfo = this.buildContextInfo(projectData, pageContext);
        
        if (pageContext.type === 'file' && currentFile) {
            return `
# „Éï„Ç°„Ç§„É´Ë©≥Á¥∞Ëß£Êûê„Çø„Çπ„ÇØ

„ÅÇ„Å™„Åü„ÅØÁµåÈ®ìË±äÂØå„Å™„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢„Ç®„É≥„Ç∏„Éã„Ç¢„Å®„Åó„Å¶„ÄÅÁâπÂÆö„ÅÆ„Éï„Ç°„Ç§„É´„ÇíË©≥Á¥∞„Å´Ëß£Êûê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

## „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà
${contextInfo}

## Ëß£ÊûêÂØæË±°„Éï„Ç°„Ç§„É´
**„Éï„Ç°„Ç§„É´Âêç**: ${fileName}

**„Éï„Ç°„Ç§„É´ÂÜÖÂÆπ**:
\`\`\`
${currentFile.slice(0, 8000)}
${currentFile.length > 8000 ? '\n... (ÁúÅÁï•) ...' : ''}
\`\`\`

## Âá∫ÂäõË¶ÅÊ±Ç
‰ª•‰∏ã„ÅÆÊßãÈÄ†„ÅßÊó•Êú¨Ë™û„ÅßËß£ÊûêÁµêÊûú„ÇíÊèê‰æõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

### üéØ „Éï„Ç°„Ç§„É´„ÅÆÁõÆÁöÑ„Å®Ë≤¨‰ªª
- „Åì„ÅÆ„Éï„Ç°„Ç§„É´„ÅÆ‰∏ªË¶Å„Å™ÂΩπÂâ≤„Å®Ê©üËÉΩ
- „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂÖ®‰Ωì„Åß„ÅÆ‰ΩçÁΩÆ„Å•„Åë
- ‰ªñ„ÅÆ„Éï„Ç°„Ç§„É´„Å®„ÅÆÈñ¢‰øÇÊÄß

### üîß ÂÆüË£Ö„ÅÆË©≥Á¥∞Ëß£Êûê
- ‰∏ªË¶Å„Å™„ÇØ„É©„Çπ„ÄÅÈñ¢Êï∞„ÄÅ„É°„ÇΩ„ÉÉ„Éâ„ÅÆË™¨Êòé
- ‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Çã„Éá„Ç∂„Ç§„É≥„Éë„Çø„Éº„É≥„Å®„Ç¢„É´„Ç¥„É™„Ç∫„É†
- ÈáçË¶Å„Å™„É≠„Ç∏„ÉÉ„ÇØ„Å®Âá¶ÁêÜ„Éï„É≠„Éº

### üí° ÊäÄË°ìÁöÑ„Å™„Éù„Ç§„É≥„Éà
- Ê≥®ÁõÆ„Åô„Åπ„ÅçÂÆüË£Ö„ÉÜ„ÇØ„Éã„ÉÉ„ÇØ
- „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„Å®„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÅÆËÄÉÊÖÆÁÇπ
- „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Å®„Ç®„ÉÉ„Ç∏„Ç±„Éº„ÇπÂØæÂøú

### üîç ÊîπÂñÑÊèêÊ°à„Å®Â≠¶Áøí„Éù„Ç§„É≥„Éà
- „Ç≥„Éº„Éâ„ÅÆÊîπÂñÑÂèØËÉΩÊÄß
- Â≠¶ÁøíËÄÖ„ÅåÊ≥®ÁõÆ„Åô„Åπ„ÅçÊäÄË°ìË¶ÅÁ¥†
- ÂÆüÂãô„Åß„ÅÆÂøúÁî®ÊñπÊ≥ï

ÂõûÁ≠î„ÅØÂÖ∑‰ΩìÁöÑ„Å™„Ç≥„Éº„Éâ‰æã„ÇíÂèÇÁÖß„Åó„Å™„Åå„ÇâË™¨Êòé„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
            `.trim();
        } else {
            return `
# „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊäÄË°ìË©≥Á¥∞Ëß£Êûê„Çø„Çπ„ÇØ

„ÅÇ„Å™„Åü„ÅØÁµåÈ®ìË±äÂØå„Å™„Ç∑„Éã„Ç¢„Ç®„É≥„Ç∏„Éã„Ç¢„Å®„Åó„Å¶„ÄÅ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÊäÄË°ìÁöÑË©≥Á¥∞„ÇíËß£Êûê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

## Ëß£ÊûêÂØæË±°„Éó„É≠„Ç∏„Çß„ÇØ„Éà
${contextInfo}

## Âá∫ÂäõË¶ÅÊ±Ç
‰ª•‰∏ã„ÅÆÊßãÈÄ†„ÅßÊó•Êú¨Ë™û„ÅßËß£ÊûêÁµêÊûú„ÇíÊèê‰æõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

### üîß ÊäÄË°ìÂÆüË£Ö„ÅÆÊ∑±Êéò„Çä
- ‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„ÇãÈ´òÂ∫¶„Å™ÊäÄË°ì„ÇÑ„É©„Ç§„Éñ„É©„É™
- „Ç´„Çπ„Çø„É†ÂÆüË£Ö„Å®„Åù„ÅÆÁêÜÁî±
- „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊúÄÈÅ©Âåñ„ÅÆÊâãÊ≥ï

### üõ†Ô∏è ÈñãÁô∫„Å®„Éá„Éó„É≠„Ç§„É°„É≥„Éà
- „Éì„É´„Éâ„Ç∑„Çπ„ÉÜ„É†„Å®„ÉØ„Éº„ÇØ„Éï„É≠„Éº
- ‰æùÂ≠òÈñ¢‰øÇÁÆ°ÁêÜ„ÅÆÊà¶Áï•
- „Éá„Éó„É≠„Ç§„É°„É≥„Éà„Å®„Ç§„É≥„Éï„É©ÊßãÊàê

### üîí ÂìÅË≥™„Å®„Çª„Ç≠„É•„É™„ÉÜ„Ç£
- „Ç≥„Éº„ÉâÂìÅË≥™ÁÆ°ÁêÜ„ÅÆÊâãÊ≥ï
- „Çª„Ç≠„É•„É™„ÉÜ„Ç£ÂØæÁ≠ñ„Å®„Éô„Çπ„Éà„Éó„É©„ÇØ„ÉÜ„Ç£„Çπ
- „ÉÜ„Çπ„ÉàÊà¶Áï•„Å®„Ç´„Éê„É¨„ÉÉ„Ç∏

### üìà „Çπ„Ç±„Éº„É©„Éì„É™„ÉÜ„Ç£„Å®‰øùÂÆàÊÄß
- Êã°ÂºµÊÄß„ÇíËÄÉÊÖÆ„Åó„ÅüË®≠Ë®à
- ‰øùÂÆàÊÄß„ÇíÈ´ò„ÇÅ„ÇãÂ∑•Â§´
- ÊäÄË°ìË≤†ÂÇµ„ÅÆÁÆ°ÁêÜ

ÂõûÁ≠î„ÅØÊäÄË°ìÁöÑ„Å´Ê∑±„Åè„ÄÅÂÆüÁî®ÁöÑ„Å™ÂÜÖÂÆπ„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
            `.trim();
        }
    }

    createLearningPrompt({ projectData, pageContext, userLevel }) {
        const contextInfo = this.buildContextInfo(projectData, pageContext);
        
        return `
# Â≠¶Áøí„Ç¨„Ç§„Éâ‰ΩúÊàê„Çø„Çπ„ÇØ

„ÅÇ„Å™„Åü„ÅØÁµåÈ®ìË±äÂØå„Å™ÊäÄË°ìÊïôËÇ≤ËÄÖ„Å®„Åó„Å¶„ÄÅ„Åì„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÂåÖÊã¨ÁöÑ„Å™Â≠¶Áøí„Ç¨„Ç§„Éâ„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

## ÂØæË±°„Éó„É≠„Ç∏„Çß„ÇØ„Éà
${contextInfo}

## Â≠¶ÁøíËÄÖ„É¨„Éô„É´
- ÂØæË±°: ${userLevel === 'beginner' ? 'ÂàùÂøÉËÄÖ' : userLevel === 'intermediate' ? '‰∏≠Á¥öËÄÖ' : '‰∏äÁ¥öËÄÖ'}

## Âá∫ÂäõË¶ÅÊ±Ç
‰ª•‰∏ã„ÅÆÊßãÈÄ†„ÅßÊó•Êú¨Ë™û„ÅßÂ≠¶Áøí„Ç¨„Ç§„Éâ„ÇíÊèê‰æõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

### üìö ÂâçÊèêÁü•Ë≠ò„Å®Ê∫ñÂÇô
- ÂøÖË¶Å„Å™Âü∫Á§éÁü•Ë≠ò„Å®„Çπ„Ç≠„É´
- Êé®Â•®„Åô„Çã‰∫ãÂâçÂ≠¶Áøí„É™„ÇΩ„Éº„Çπ
- ÈñãÁô∫Áí∞Â¢É„ÅÆ„Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÊâãÈ†Ü

### üéØ ÊÆµÈöéÂà•Â≠¶Áøí„Éë„Çπ
#### Á¨¨1ÊÆµÈöéÔºöÂü∫Á§éÁêÜËß£
- ÊúÄÂàù„Å´ÁêÜËß£„Åô„Åπ„ÅçÊ¶ÇÂøµ„Å®„Éï„Ç°„Ç§„É´
- Âü∫Êú¨ÁöÑ„Å™Âãï‰ΩúÂéüÁêÜ„ÅÆÊääÊè°
- Á∞°Âçò„Å™Âãï‰ΩúÁ¢∫Ë™çÊñπÊ≥ï

#### Á¨¨2ÊÆµÈöéÔºöÊßãÈÄ†ÁêÜËß£
- „Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Å®„É¢„Ç∏„É•„Éº„É´Èñ¢‰øÇ
- ‰∏ªË¶Å„Å™Âá¶ÁêÜ„Éï„É≠„Éº„ÅÆËøΩË∑°
- „Éá„Éê„ÉÉ„Ç∞„Å®„É≠„Ç∞„ÅÆÊ¥ªÁî®

#### Á¨¨3ÊÆµÈöéÔºöË©≥Á¥∞ÂÆüË£Ö
- È´òÂ∫¶„Å™Ê©üËÉΩ„ÅÆÁêÜËß£
- „Ç´„Çπ„Çø„Éû„Ç§„Ç∫„Å®Êã°ÂºµÊñπÊ≥ï
- „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂàÜÊûê

### üõ†Ô∏è ÂÆüË∑µË™≤È°å„Å®„Éó„É≠„Ç∏„Çß„ÇØ„Éà
- ÁêÜËß£Â∫¶Á¢∫Ë™ç„ÅÆ„Åü„ÇÅ„ÅÆË™≤È°å
- ÂÆüË£Ö„Åó„Å¶„Åø„Çã„Åπ„ÅçÊ©üËÉΩ
- Áô∫Â±ïÁöÑ„Å™„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Ç¢„Ç§„Éá„Ç¢

### üìñ Èñ¢ÈÄ£„É™„ÇΩ„Éº„Çπ„Å®ÂèÇËÄÉË≥áÊñô
- ÂÖ¨Âºè„Éâ„Ç≠„É•„É°„É≥„Éà„Å®„ÉÅ„É•„Éº„Éà„É™„Ç¢„É´
- Èñ¢ÈÄ£ÊäÄË°ì„ÅÆÂ≠¶Áøí„É™„ÇΩ„Éº„Çπ
- „Ç≥„Éü„É•„Éã„ÉÜ„Ç£„Å®ÊÉÖÂ†±Ê∫ê

ÂõûÁ≠î„ÅØÂÆüË∑µÁöÑ„Åß„ÄÅÂÖ∑‰ΩìÁöÑ„Å™„Ç¢„ÇØ„Ç∑„Éß„É≥„Éó„É©„É≥„ÇíÂê´„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
        `.trim();
    }

    createCodeBlockPrompt({ code, language, context }) {
        return `
# „Ç≥„Éº„Éâ„Çπ„Éã„Éö„ÉÉ„ÉàËß£Ë™¨„Çø„Çπ„ÇØ

„ÅÇ„Å™„Åü„ÅØÁµåÈ®ìË±äÂØå„Å™„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞Ë¨õÂ∏´„Å®„Åó„Å¶„ÄÅ‰ª•‰∏ã„ÅÆ„Ç≥„Éº„Éâ„ÇíÂàùÂøÉËÄÖ„Å´„ÇÇÂàÜ„Åã„Çä„ÇÑ„Åô„ÅèËß£Ë™¨„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

## „Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà
- „Éó„É≠„Ç∏„Çß„ÇØ„Éà: ${context.owner}/${context.repo}
- „Éï„Ç°„Ç§„É´: ${context.filePath || '‰∏çÊòé'}
- Ë®ÄË™û: ${language}

## Ëß£ÊûêÂØæË±°„Ç≥„Éº„Éâ
\`\`\`${language}
${code}
\`\`\`

## Âá∫ÂäõË¶ÅÊ±Ç
‰ª•‰∏ã„ÅÆÊßãÈÄ†„ÅßÊó•Êú¨Ë™û„ÅßËß£Ë™¨„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

### üéØ „Åì„ÅÆ„Ç≥„Éº„Éâ„ÅÆÁõÆÁöÑ
- ‰Ωï„Çí„Åô„Çã„Ç≥„Éº„Éâ„Å™„ÅÆ„Åã
- „Å™„Åú„Åì„ÅÆÂÆüË£Ö„ÅåÂøÖË¶Å„Å™„ÅÆ„Åã

### üîß Âá¶ÁêÜ„ÅÆÊµÅ„Çå
- Ë°å„Åî„Å®„ÅÆÂá¶ÁêÜÂÜÖÂÆπ
- ÈáçË¶Å„Å™„É≠„Ç∏„ÉÉ„ÇØ„ÅÆË™¨Êòé
- ‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„ÇãAPI„ÇÑ„É°„ÇΩ„ÉÉ„Éâ

### üí° ÊäÄË°ìÁöÑ„Å™„Éù„Ç§„É≥„Éà
- Ê≥®ÁõÆ„Åô„Åπ„ÅçÂÆüË£Ö„ÉÜ„ÇØ„Éã„ÉÉ„ÇØ
- „Çà„Åè‰Ωø„Çè„Çå„Çã„Éë„Çø„Éº„É≥
- ÂàùÂøÉËÄÖ„ÅåÁêÜËß£„Åô„Åπ„ÅçÊ¶ÇÂøµ

### üöÄ ÂøúÁî®„Å®Áô∫Â±ï
- È°û‰ºº„ÅÆÂÆüË£Ö‰æã
- ÊîπÂñÑ„ÇÑÊúÄÈÅ©Âåñ„ÅÆ„Ç¢„Ç§„Éá„Ç¢
- Èñ¢ÈÄ£„Åô„ÇãÂ≠¶Áøí„Éà„Éî„ÉÉ„ÇØ

ÂõûÁ≠î„ÅØÁ∞°ÊΩî„ÅßÂàÜ„Åã„Çä„ÇÑ„Åô„Åè„ÄÅÂ∞ÇÈñÄÁî®Ë™û„Å´„ÅØÈÅ©Âàá„Å™Ë™¨Êòé„Çí‰ªò„Åë„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
        `.trim();
    }

    buildContextInfo(projectData, pageContext) {
        if (!projectData || projectData.error) {
            return `
**„Éó„É≠„Ç∏„Çß„ÇØ„Éà**: ${pageContext.owner}/${pageContext.repo}
**„Éñ„É©„É≥„ÉÅ**: ${pageContext.branch}
**„Éö„Éº„Ç∏„Çø„Ç§„Éó**: ${pageContext.type}
**Ê≥®ÊÑè**: „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇURL„Å®ÂèØË¶ñÊÉÖÂ†±„ÅÆ„Åø„ÅßËß£Êûê„Åó„Åæ„Åô„ÄÇ
            `.trim();
        }

        const packageInfo = projectData.packageJson ? this.parsePackageJson(projectData.packageJson) : null;
        
        return `
**„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂêç**: ${projectData.name}
**ÊâÄÊúâËÄÖ**: ${projectData.owner}
**„Éñ„É©„É≥„ÉÅ**: ${projectData.branch}
**Ë™¨Êòé**: ${projectData.description || 'ÔºàË™¨Êòé„Å™„ÅóÔºâ'}
**‰∏ªË¶ÅË®ÄË™û**: ${projectData.languages?.join(', ') || '‰∏çÊòé'}
**„Éà„Éî„ÉÉ„ÇØ**: ${projectData.topics?.join(', ') || '„Å™„Åó'}
${packageInfo ? `**„Éë„ÉÉ„Ç±„Éº„Ç∏ÊÉÖÂ†±**: ${packageInfo}` : ''}
**„É°„Çø„Éá„Éº„Çø**: ${projectData.metadata ? `‚≠ê${projectData.metadata.stargazers_count || 0} | üç¥${projectData.metadata.forks_count || 0} | üìÖ${projectData.metadata.updated_at?.slice(0, 10) || '‰∏çÊòé'}` : '‰∏çÊòé'}
        `.trim();
    }

    parsePackageJson(packageJson) {
        try {
            const pkg = JSON.parse(packageJson);
            const dependencies = Object.keys(pkg.dependencies || {}).slice(0, 5);
            const devDependencies = Object.keys(pkg.devDependencies || {}).slice(0, 3);
            return `${pkg.name || 'unknown'}@${pkg.version || 'unknown'}, ‰æùÂ≠ò: [${dependencies.join(', ')}], ÈñãÁô∫: [${devDependencies.join(', ')}]`;
        } catch (error) {
            return 'package.jsonËß£Êûê„Ç®„É©„Éº';
        }
    }

    buildFileStructureTree(fileStructure) {
        if (!fileStructure || fileStructure.length === 0) {
            return '„Éï„Ç°„Ç§„É´ÊßãÈÄ†ÊÉÖÂ†±„Å™„Åó';
        }

        // „Éï„Ç°„Ç§„É´ÊßãÈÄ†„Çí„ÉÑ„É™„ÉºÂΩ¢Âºè„ÅßË°®Á§∫ÔºàÊúÄÂ§ß100„Éï„Ç°„Ç§„É´Ôºâ
        return fileStructure
            .slice(0, 100)
            .map(file => {
                const indent = '  '.repeat((file.path?.split('/').length || 1) - 1);
                const icon = file.type === 'tree' ? 'üìÅ' : 'üìÑ';
                return `${indent}${icon} ${file.path || file.name || 'unknown'}`;
            })
            .join('\n');
    }
}

// ÂàùÊúüÂåñ
new AdvancedGitHubEnhancer();
